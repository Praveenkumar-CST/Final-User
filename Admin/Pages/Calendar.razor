@page "/calendar"
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="page-container">
    <div class="calendar-container">
        @if (isLoading)
        {
            <div class="loading-overlay">
                <div class="loading-spinner"></div>
            </div>
        }
        <div class="calendar-header-container">
            <button class="nav-button" @onclick="PreviousMonth">Previous</button>
            <h3 class="calendar-title">@currentDate.ToString("MMMM yyyy")</h3>
            <button class="nav-button" @onclick="NextMonth">Next</button>
        </div>
        <div class="calendar">
            <div class="calendar-header">
                @foreach (var day in daysOfWeek)
                {
                    <div class="day-header">@day</div>
                }
            </div>
            <div class="calendar-body">
                @foreach (var week in calendarWeeks)
                {
                    <div class="week">
                        @foreach (var day in week)
                        {
                            <div class="day @(day.IsCurrentMonth ? "" : "other-month") @(day.IsToday ? "today" : "") @(HasEvent(day.Date) ? "has-event" : "")" 
                                 @onclick="() => SelectDate(day.Date)">
                                <div class="day-number">@day.Date.Day</div>
                                @if (IsHoliday(day.Date))
                                {
                                    <div class="holiday-indicator @(GetHolidayType(day.Date) == "Permanent" ? "permanent" : "optional")"></div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="holidays-box" @onclick="NavigateToHolidays"><span>Holidays</span></div>
        @if (showEventInput)
        {
            <div class="event-input">
                <h4>Events for @selectedDate.ToString("dddd, MMMM d, yyyy")</h4>
                @if (hasExistingEvent)
                {
                    <div class="existing-event">
                        <strong>Event:</strong> @events[selectedDate].Description
                        <br />
                        <strong>Type:</strong> @(events[selectedDate].HolidayType == "Permanent" ? "Permanent Holiday" : "Optional Holiday")
                    </div>
                }
                else
                {
                    <div class="no-event">
                        No events scheduled for this date.
                    </div>
                }
                <div class="event-buttons">
                    <button @onclick="CloseEventInput">Close</button>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .calendar-header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    .nav-button {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'Segoe UI', sans-serif;
        transition: background-color 0.2s ease;
    }
    .nav-button:hover {
        background-color: #2980b9;
    }
    html, body {
        background-color: #ffffff;
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
    }
    .page-container {
        background-color: #ffffff;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
    }
    .calendar-container {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        position: relative;
    }
    .calendar-title {
        color: #1a1a1a;
        text-align: center;
        margin-bottom: 20px;
        font-family: 'Segoe UI', sans-serif;
    }
    .calendar {
        width: 600px;
        background-color: #2c3e50;
        border-radius: 8px;
        overflow: hidden;
    }
    .calendar-header {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        text-align: center;
        background-color: #34495e;
        color: white;
        padding: 10px 0;
        font-family: 'Segoe UI', sans-serif;
    }
    .day-header {
        padding: 8px;
        font-weight: 600;
    }
    .calendar-body {
        display: grid;
        gap: 1px;
        background-color: #34495e;
    }
    .week {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
    }
    .day {
        text-align: center;
        padding: 15px;
        background-color: #ffffff;
        color: #2c3e50;
        cursor: pointer;
        transition: all 0.2s ease;
        font-family: 'Segoe UI', sans-serif;
        position: relative;
    }
    .day:hover {
        background-color: #3498db;
        color: white;
        transform: scale(1.05);
    }
    .other-month {
        background-color: #ecf0f1;
        color: #7f8c8d;
    }
    .other-month:hover {
        background-color: #bdc3c7;
        color: #2c3e50;
    }
    .today {
        background-color: #3498db;
        color: white;
        font-weight: bold;
        border: 2px solid #2980b9;
    }
    .today:hover {
        background-color: #2980b9;
    }
    .day-number {
        margin-bottom: 2px;
    }
    .holiday-indicator {
        position: absolute;
        bottom: 5px;
        right: 5px;
        width: 10px;
        height: 10px;
        border-radius: 50%;
    }
    .holiday-indicator.permanent {
        background-color: #28a745;
    }
    .holiday-indicator.optional {
        background-color: #e74c3c;
    }
    .holidays-box {
        margin-top: 20px;
        background-color: #3498db;
        border-radius: 5px;
        padding: 15px;
        text-align: center;
        color: white;
        font-family: 'Segoe UI', sans-serif;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }
    .holidays-box:hover {
        background-color: #2980b9;
    }
    .holidays-box span {
        font-weight: 500;
    }
    .has-event {
        position: relative;
    }
    .event-input {
        margin-top: 20px;
        padding: 15px;
        background-color: #ffffff;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .event-input h4 {
        margin: 0 0 10px 0;
        color: #2c3e50;
        font-family: 'Segoe UI', sans-serif;
    }
    .existing-event {
        margin-bottom: 10px;
        padding: 8px;
        background-color: #e8f4f8;
        border-radius: 4px;
        color: #2c3e50;
    }
    .no-event {
        margin-bottom: 10px;
        padding: 8px;
        background-color: #f8f9fa;
        border-radius: 4px;
        color: #2c3e50;
    }
    .event-buttons {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }
    .event-buttons button {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-family: 'Segoe UI', sans-serif;
        background-color: #95a5a6;
        color: white;
    }
    .event-buttons button:hover {
        background-color: #7f8c8d;
    }
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #3498db;
        border-top: 4px solid transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    @@keyframes spin {
        to { transform: rotate(360deg); }
    }
</style>

@code {
    private DateTime currentDate = DateTime.Today;
    private string[] daysOfWeek = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
    private List<List<CalendarDay>> calendarWeeks = new();
    private Dictionary<DateTime, Event> events = new();
    private bool showEventInput;
    private DateTime selectedDate;
    private bool hasExistingEvent;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        GenerateCalendar();
        isLoading = false;
    }

    private async Task LoadEvents()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Event>>("http://localhost:5085/api/Events");
            if (response != null)
            {
                events = response
                    .Where(e => DateTime.TryParse(e.Date, out _))
                    .ToDictionary(
                        e => DateTime.Parse(e.Date!),
                        e => e
                    );
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load events: {ex.Message}");
        }
    }

    private void GenerateCalendar()
    {
        calendarWeeks.Clear();
        var firstOfMonth = new DateTime(currentDate.Year, currentDate.Month, 1);
        var firstDayOfWeek = (int)firstOfMonth.DayOfWeek;
        var currentDay = firstOfMonth.AddDays(-firstDayOfWeek);
        
        for (int week = 0; week < 6; week++)
        {
            calendarWeeks.Add(Enumerable.Range(0, 7).Select(d => new CalendarDay
            {
                Date = currentDay.AddDays(d),
                IsCurrentMonth = currentDay.AddDays(d).Month == currentDate.Month,
                IsToday = currentDay.AddDays(d).Date == DateTime.Today.Date
            }).ToList());
            currentDay = currentDay.AddDays(7);
        }
    }

    private void SelectDate(DateTime date)
    {
        selectedDate = date;
        hasExistingEvent = events.ContainsKey(date);
        showEventInput = true;
    }

    private void CloseEventInput()
    {
        showEventInput = false;
    }

    private bool HasEvent(DateTime date) => events.ContainsKey(date);
    private bool IsHoliday(DateTime date) => events.ContainsKey(date);
    private string GetHolidayType(DateTime date) => events.TryGetValue(date, out var evt) ? evt.HolidayType ?? "" : "";

    private void NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
        GenerateCalendar();
    }

    private void PreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        GenerateCalendar();
    }

    private void NavigateToHolidays() => NavigationManager.NavigateTo("/holidays");

    public class CalendarDay
    {
        public DateTime Date { get; set; }
        public bool IsCurrentMonth { get; set; }
        public bool IsToday { get; set; }
    }

    public class Event
    {
        public string? Date { get; set; }
        public string? Description { get; set; }
        public string? HolidayType { get; set; }
    }
}